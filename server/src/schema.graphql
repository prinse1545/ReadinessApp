

type Query {
  players: [Player!]!
  player(id: String!): Player!
  getPlayerId: String!
  days: [Day!]!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  createDay(
    playerId: String!,
    hoursOfSleep: Float!,
    sleepQuality: Int!,
    trainingDay: Boolean!,
    fatigueLevel: Int!,
    soreness: [sorenessDayInput],
    mentalStress: Int!
  ): Day
}

type Subscription {
  newPlayer: Player
}


type AuthPayload {
  token: String
  player: Player
}

type Player {
  id: ID!
  name: String!
  email: String!
}

type Day {
  id: ID!
  playerId: String!
  hoursOfSleep: Float!
  sleepQuality: Int!
  trainingDay: Boolean!
  fatigueLevel: Int!
  soreness: [sorenessDay]
  mentalStress: Int!
}

type sorenessDay {
  id: ID!
  bodyPart: String!
  sorenessLevel: Int!
}

input DayCreateInput {
  playerId: String!,
  hoursOfSleep: Float!,
  sleepQuality: Int!,
  trainingDay: Boolean!,
  fatigueLevel: Int!,
  soreness: [sorenessDayInput],
  mentalStress: Int!
}

input sorenessDayInput {
  bodyPart: String!
  sorenessLevel: Int!
}
